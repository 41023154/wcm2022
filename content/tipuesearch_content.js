var tipuesearch = {"pages": [{'title': 'About', 'text': '此內容管理系統以  https://github.com/mdecourse/cmsimde  作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作. \n 利用 cmsimde 建立靜態網誌方法: \n 1. 在 github 建立倉儲, git clone 到近端 \n 2. 參考  https://github.com/mdecourse/newcms , 加入除了 cmsimde 目錄外的所有內容 \n 以 git submodule add  https://github.com/mdecourse/cmsimde  cmsimde \n 建立 cmsimde 目錄, 並從 github 取下子模組內容. \n 3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器. \n 動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端. \n 4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行: \n git clone --recurse-submodules  https://github.com/mdecourse/newcms.git \xa0\xa0 \n \n', 'tags': '', 'url': 'About.html'}, {'title': 'Online', 'text': '為配合學校因應疫情所作的課程教學措施: \n 線上教學訊息發布區:  https://gitter.im/mdecourse/wcm2022 \n 線上同步教學系統: \n https://teams.microsoft.com  (請利用 @gm   註冊帳號 後, 每週透過 Team code 進入 channel 上課) \n 網際內容管理課程倉儲:  https://github.com/mdecycu/wcm2022 \n 網際內容管理課程網頁:  https://mde.tw/wcm2022 \n 課程相關檔案下載:  http://wcm.cycu.org:88/  (請設定 17.4 代理主機, 並輸入認證帳號與密碼後連線下載) \n \n', 'tags': '', 'url': 'Online.html'}, {'title': 'w13', 'text': '\n \n \n \n  啟動 Brython  \n \n \n \n 1a - 四技一 \n \n \n \n 第一段線上教學影片  (說明如何在個人動態與靜態網頁中配置 Brython 程式環境, 並啟動執行線上程式) \n 第二段線上教學影片  (說明下列 Brython 程式各行功能) \n 執行結果如下: \n \n', 'tags': '', 'url': 'w13.html'}, {'title': 'midterm', 'text': '期中考quest \n 配合 Wink 檔案將 js 檔案設定如下 \n \n \n \n  接下來將 mp4 檔案從 downloads 目錄取出  \n 配合 Wink 檔案將 js 檔案設定如下 \n \n  接下來將 mp4 檔案從 downloads 目錄取出  \n \n \n \n   \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'midterm.html'}, {'title': 'cmsimde', 'text': 'https://github.com/mdecycu/cmsimde \n 動態網頁 - localhost 與 remote site, 若在 init.py 中將 ip 設為 127.0.0.1 則在 localhost 啟動, 若設為外部 IP 則可以從 internet 中任何一台電腦的瀏覽器連接. \n 靜態網頁 - 在動態網頁系統登入後, 可以利用 generate_pages 按鈕將動態網頁轉進 content 目錄, 並結合 cmsimde/static, downloads、images、blog、reveal 等目錄, 可在全球資訊網伺服器 (如 Github Pages、nginx 或 Fossil SCM server 中以純 html、javascript 及 css 檔案進行伺服. \n Leo Editor - cmsimde 中的 Pelican blog 與 Reveal.js 專案檔位於 config/pelican.leo 與 reveal.leo, 可以利用 Leo Editor 編輯. \n reveal.js - 位於 config/reveal.leo \n Pelican blog - 位於 config/pelican.leo, 可以透過 Python 程式讓 Pelican blog 內容與 blogger 同步, 其中需要執行 Google API (Oauth2) 延伸程式. \n https://www.blogger.com \n', 'tags': '', 'url': 'cmsimde.html'}, {'title': 'Token and SSH', 'text': 'Remote Desktop - Windows, Ubuntu, Mac \n Token: \n https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token \n Github token 是一串可以用來替代 Github 帳號與密碼功能的字串, 可在登入 Github 帳號後, 至  https://github.com/settings/tokens  設定. 每一個 token 都具備有效時間與權限範圍, 一般初學者可以只勾選 Token 的 repo 改版權限, 並選擇 30 天的有效時間. 之後再設法改用 SSH 對 Github 倉儲改版. \n 以下影片說明如何使用 Personal Access Token 執行 git push: \n \n \n \n  接下來將 mp4 檔案從 downloads 目錄取出  \n \n \n \n   \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'Token and SSH.html'}]};